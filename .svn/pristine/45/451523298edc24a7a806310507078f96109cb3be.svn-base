import { AfterViewInit, Component, ElementRef, OnInit, QueryList, ViewChild, ViewChildren } from '@angular/core';
import { Router } from '@angular/router';
import { AlertService } from 'src/app/providers/alertService';
import { LoaderService } from 'src/app/providers/loader.service';
import { WebService } from 'src/app/providers/web.serivce';
import { environment } from 'src/environments/environment';

@Component({
  selector: 'app-campaign',
  templateUrl: './campaign.component.html',
  styleUrls: ['./campaign.component.scss']
})
export class CampaignComponent implements OnInit {

  title = "Animated Count";

  nums: Array<number> = [25, 76, 48];

  @ViewChild("oneItem") oneItem: any;
  @ViewChildren("count") count: QueryList<any>;

  products: any;

  base_url:string = environment.base_url;

  constructor(
    
    private loaderService: LoaderService,
    
    private router: Router,

    private elRef: ElementRef,

    private web: WebService,
    
    private alert: AlertService

    ) 
    {
    this.loaderService.stopLoader();
   }

   openContest(data:any) 
   {
      if(data.web_id=='2'){
        console.log('navigate contest');
       this.router.navigate(['/campaign-contest']);
      }else if(data.web_id=='3'){
        console.log('navigate email forms');
        this.router.navigate(['/campaign-email-forms']);
      }else if(data.web_id=='4'){
        console.log('navigate learn and earn')
        this.router.navigate(['/campaign-learn-and-earn']);
      }else if(data.web_id=='5'){
        console.log('navigate social comments')
        this.router.navigate(['/campaign-social-comments']);
      }else{
        console.log('navigate sweep stakes')
        this.router.navigate(['/campaign-sweep-stakes']);
      }
   }
   

  ngOnInit(): void {
    this.getProducts();
    this.animateCount();
  }

  animateCount() {
    let _this = this;

    let single = this.oneItem.nativeElement.innerHTML;

    this.counterFunc(single, this.oneItem, 7000);

    this.count.forEach(item => {
      _this.counterFunc(item.nativeElement.innerHTML, item, 2000);
    });
  }

  counterFunc(end: number, element: any, duration: number) {
    let range, current: number, step, timer;

    range = end - 0;
    current = 0;
    step = Math.abs(Math.floor(duration / range));

    timer = setInterval(() => {
      current += 1;
      element.nativeElement.textContent = current;
      if (current == end) {
        clearInterval(timer);
      }
    }, step);
  }

  getProducts() {
    this.web.getData('getAllProducts').then((res) => {
      if (res.status == '200') {
        this.products = res.data;
      } else {
        this.alert.errorMsg(res.error, '');
      }
    }, err => {
      this.alert.errorMsg('Connection Error', '');
    });
  }

}
