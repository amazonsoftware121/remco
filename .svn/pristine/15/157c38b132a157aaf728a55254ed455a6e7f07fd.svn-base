import { Component, OnInit, ViewChild } from '@angular/core';
import { FormControl, FormGroup, Validators } from '@angular/forms';
import { SocialAuthService, GoogleLoginProvider, FacebookLoginProvider, SocialUser } from 'angularx-social-login';

import { LoaderService } from '../../providers/loader.service';
import { AlertService } from '../../providers/alertService';
import { WebService } from '../..//providers/web.serivce';
import { ActivatedRoute, Router } from '@angular/router';

@Component({
  selector: 'app-login',
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.scss']
})
export class LoginComponent implements OnInit{

  loginForm: any;

  successMsg: boolean;

  errorMsg: boolean;

  constructor(
    private loaderService: LoaderService,
    private alert: AlertService,
    private web: WebService,
    private activatedRoute: ActivatedRoute,
    private router: Router,
    private socialAuthService: SocialAuthService
  ) {
    this.loaderService.stopLoader();
  }

  ngOnInit() {
    this.buildForm();
    this.activatedRoute.paramMap.subscribe((res: any) => {
      console.log(res)
      if (res.params.action == 'success') {
        this.successMsg = true;
        setTimeout(() => {
          this.successMsg = false;
        }, 5000);
      }
      else if (res.params.action == 'error') {
        this.errorMsg = true;
        setTimeout(() => {
          this.errorMsg = false;
        }, 5000);
      }
    });

    this.socialAuthService.initState.subscribe(res=>{
      console.log(res);
    })
  }

  buildForm() {
    this.loginForm = new FormGroup({
      email: new FormControl('', [Validators.required, Validators.pattern(
        /^([\w-]+(?:\.[\w-]+)*)@((?:[\w-]+\.)*\w[\w-]{0,66})\.([a-z]{2,6}(?:\.[a-z]{2})?)$/i
      ),]),
      password: new FormControl('', [Validators.required]),
    });
  }

  signInWithSocial(type:string): void {
    // this.loginForm.loginMethod = type;
    if (type=='google') {
      this.socialAuthService.signIn(GoogleLoginProvider.PROVIDER_ID).then((res)=>{
        console.log(res);
        // this.loginForm.auth_token = res.id;
        this.signInWithSocialCallback(res);
      }, err=>{
        console.log(err);
      });
    } 
    else if(type=='facebook'){
      console.log(type);
      this.socialAuthService.signIn(FacebookLoginProvider.PROVIDER_ID).then((res)=>{
        console.log(res);
        //this.loginForm.auth_token = res.id;
        this.signInWithSocialCallback(res);
      },err=>{
        console.log(err);
      })
    }
  }

  signInWithSocialCallback(res) {
    console.log('google value is', res);
    let data = {
      participant_email: res.email,
      firstName: res.firstName,
      lastName: res.lastName
    }
    console.log(data);
    this.web.postData("participantLoginSocial", data).then((res) => {
      if (res.status == "200") {
        localStorage.setItem('UserDetails', JSON.stringify(res.data));
        localStorage.setItem('UserId', res.id);
        localStorage.setItem('Role', 'Participant');
        this.router.navigate(['/login']);
        this.alert.successMsg(res.error, '');
      } else {
        this.alert.errorMsg(res.error, '');
      }
    },
    (err) => {
      this.alert.errorMsg('Connection Error', '');
    });
  }

  onSubmit() {
    console.log('form value is', this.loginForm);
    if (this.loginForm.valid) {
      this.web.postData('userLogin', this.loginForm.value).then((res) => {
        if (res.status == '200') {
          console.log('data is', res);
          this.alert.successMsg(res.error, '');
          let companyDetails = res.data;
          localStorage.setItem('UserDetails', JSON.stringify(companyDetails));
          localStorage.setItem('UserId', res.data.web_id);
          localStorage.setItem('Role', res.role);
          this.loginForm.reset();
          this.router.navigate(['/my-account']);
        } else {
          this.alert.errorMsg(res.error, '');
        }
      }, err => {
        console.log(err);
        this.alert.errorMsg('Connection Error', '');
      });
    } else {
      this.alert.warningMsg('Check if all fields are filled properly and then try', '');
    }
  }
}
